@keyframes pulse {
    0% {
        background-color: color(var(--background-color) / .9);
    }
    50% {
        background-color: color(var(--background-color) / 1);
    }
    100% {
        background-color: color(var(--background-color) / .9);
    }
}

*,
::before,
::after {
    box-sizing: border-box;
}

:host {
    --transparent: linear-gradient(transparent, transparent);
    background-image: var(--yt-thumbnail-url-maxres, var(--transparent)),
        var(--yt-thumbnail-url-sd, var(--transparent)),
        var(--yt-thumbnail-url-hq, var(--transparent));
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    container: host / inline-size;
    display: block;
    overflow: hidden;
}

#host {
    height: 100%;
    position: relative;

    &::before {
        background: no-repeat center/cover var(--yt-thumbnail-url-previous, var(--transparent));
        background-color: transparent;
        content: "";
        filter: blur(1px);
        inset: 0;
        opacity: 0;
        position: absolute;
        transition: opacity 200ms ease;
    }
}

:host(:not([hq], [sd], [maxres])) {
    --background-color: from #777 srgb r g b;
    animation: pulse 1s infinite alternate ease;

    & #host::before {
        opacity: 1;
        transition: none;
    }
}

:host(:not(:empty)) svg {
    display: none;
}

#icon {
    position: absolute;
    inset: 0;
    display: grid;
}

svg,
::slotted(svg) {
    align-self: center;
    justify-self: center;
    transition: width 1s ease;
    width: var(--play-control-size, 4.25rem);

    :host([no-icon]) & {
        display: none;
    }
}

@container host (max-width: 480px) {
    svg,
    ::slotted(svg) {
        --play-control-size: 4rem;
    }
}

@container host (max-width: 300px) {
    svg,
    ::slotted(svg) {
        --play-control-size: 3rem;
    }
}

@container host (max-width: 150px) {
    svg,
    ::slotted(svg) {
        --play-control-size: 1.5rem;
    }
}